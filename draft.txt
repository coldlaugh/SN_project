
现在我们需要一个网络每一个节点是如何建立起来的数学模型

我们观察到的现象是：
follower数量：
第一类，初期快速增长，随后进入直线增长的状态：只有一个人是这样，这个人非常有名，他写了linux
第二类，初期增长缓慢，随后进入加速生长，然后进入直线增长状态，绝大多数的人都是这个模式


我们可以试着把follower数量和重要程序的star数量和commit数量画出来比较一下:
比较的结果是：首先commit开始增长，相伴的是follower开始增长，在随后的时间里star会迎来一个快速增长随后趋于饱和，而follower经过前期的加速增长后进入直线增长阶段。

所以我们如果要建立一个网络的模型，这个模型里面每个节点应该有这样几个内在的属性：
commit：该节点自己完成的commit，最简单的模型是速率不变，实际上很多人commit速率会不断减小，因为维护软件修改bug的改动会逐渐减小。
与此同时，节点之间的交互有：
follow：follow关系发生在target的commit达到一定数量之后，关于follower的增长模式是主要讨论点。增长模式可以利用SIR模型来处理，Susceptible代表可能感兴趣的人，Infection代表follow此人并且不断对此人做（commit/star/comment/folk）等动作的人，这些人是传播的活跃分子。Recovered代表follow并活跃过后因为遗忘等原因不再活跃地对此人有commit/star/comment/folk等动作的人，这些人对传播并没有作用，但却是一个follower。
contribute：对于另外的节点贡献commit，根据观察contribute发生需要在follow关系存在。
star：来源于两部分：网络传播与搜索。

现在follower的成长和star的成长以及commit的成长都能解释了，我们能做些什么呢？


比较：
还是关于follow成长的解释，就是说为什么follow会增加呢？原因比如(Growth of the Flickr social network, Mislove et al. 2008)
1.由于程序好导致的人们star程序后想去follow。那么，到底star和follow有没有关系呢，并且，到底star导致follow还是follow导致star。先star某人程序，再follow它。比较一下用户信息中两个人发生两种关系的先后顺序。
2.是不是有互惠性，由于别人follow/star了我，我礼貌性的follow/star回去。换句话说，是不是Afollow了B，B就返回去follow A。也要看时间上的先后关系，出现互相follow的pair时，这种pair是不是在很短时间内结成的。
3.是不是大家喜欢follow/star已经有很多follow/star的人。preferential attachment在github中是否存在：看某人indegree和他接受的新增follow之间的系数关系。此外，可以比较一下搜索引擎前和后，这种preferential attachment程度是否有区别。
4.看两个人在网络中的距离对是否star或follow有影响。

文章结构：
Introduction
第一段：虚拟社区
第二段：复杂网络（BA模型，random walk模型）
第三段：github的特殊性（有三种网络，开源、不认识、持续合作，可搜索可排序）
第四段：介绍文章结构
Background


社会网络的模型是基于一些准则建立起来的。建立这些模型的目的在于描绘真实网络的某些方面。没有任何一种模型可以完全反映现实社会网络的全部方面。建立模型的意义在哪里呢？在于找到某种现象的原因。说的明白些，就是同任何用来证实理论的实验一样，最终目的是从庞杂的可能原因中找出实际上某种现象的成因。建立模型的好处在于相比于做实验，建立模型的成本更小，可控性更强，数学上也更加严谨。但无论如何，研究的问题应该是一种容易描述的现象，而研究的结论应该是这种现象的成因，从结论出发有的情况下可以得出调控这种现象的方法。
