

现在我们需要一个网络每一个节点是如何建立起来的数学模型

我们观察到的现象是：
follower数量：
第一类，初期快速增长，随后进入直线增长的状态：只有一个人是这样，这个人非常有名，他写了linux
第二类，初期增长缓慢，随后进入加速生长，然后进入直线增长状态，绝大多数的人都是这个模式


我们可以试着把follower数量和重要程序的star数量和commit数量画出来比较一下:
比较的结果是：首先commit开始增长，相伴的是follower开始增长，在随后的时间里star会迎来一个快速增长随后趋于饱和，而follower经过前期的加速增长后进入直线增长阶段。

所以我们如果要建立一个网络的模型，这个模型里面每个节点应该有这样几个内在的属性：
commit：该节点自己完成的commit，最简单的模型是速率不变，实际上很多人commit速率会不断减小，因为维护软件修改bug的改动会逐渐减小。
与此同时，节点之间的交互有：
follow：follow关系发生在target的commit达到一定数量之后，关于follower的增长模式是主要讨论点。增长模式可以利用SIR模型来处理，Susceptible代表可能感兴趣的人，Infection代表follow此人并且不断对此人做（commit/star/comment/folk）等动作的人，这些人是传播的活跃分子。Recovered代表follow并活跃过后因为遗忘等原因不再活跃地对此人有commit/star/comment/folk等动作的人，这些人对传播并没有作用，但却是一个follower。
contribute：对于另外的节点贡献commit，根据观察contribute发生需要在follow关系存在。
star：来源于两部分：网络传播与搜索。

现在follower的成长和star的成长以及commit的成长都能解释了，我们能做些什么呢？


比较：
还是关于follow成长的解释，比如先star某人程序，再follow它。比如是不是Afollow了B，B就返回去follow A。(Frowth of the Flickr social network, Mislove et al. 2008)




